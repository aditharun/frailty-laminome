eb.fit <- function(dat, design){
n <- dim(dat)[1]
fit <- lmFit(dat, design)
fit.eb <- eBayes(fit)
logFC <- fit.eb$coefficients[, 2]
df.r <- fit.eb$df.residual
df.0 <- rep(fit.eb$df.prior, n)
s2.0 <- rep(fit.eb$s2.prior, n)
s2 <- (fit.eb$sigma)^2
s2.post <- fit.eb$s2.post
t.ord <- fit.eb$coefficients[, 2]/fit.eb$sigma/fit.eb$stdev.unscaled[, 2]
t.mod <- fit.eb$t[, 2]
p.ord <- 2*pt(-abs(t.ord), fit.eb$df.residual)
p.mod <- fit.eb$p.value[, 2]
q.ord <- qvalue(p.ord)$q
q.mod <- qvalue(p.mod)$q
results.eb <- data.frame(logFC, t.ord, t.mod, p.ord, p.mod, q.ord, q.mod, df.r, df.0, s2.0, s2, s2.post)
results.eb <- results.eb[order(results.eb$p.mod), ]
return(results.eb)
}
res.eb <- eb.fit(dat, design)
res.eb$accession <- rownames(res.eb)
res.eb <- res.eb %>% as_tibble()
ref.guide <- data[,c("Protein Descriptions", "Protein.Group.Accessions")]
res.eb$Protein <- ref.guide$`Protein Descriptions`[match(res.eb$accession, ref.guide$Protein.Group.Accessions)]
res.eb %>% arrange(p.ord) %>% select(Protein, p.ord, logFC) %>% rename("p-value"=p.ord)
d
design <- model.matrix(~factor(c(2, 2, 2, 2, 2, 1, 1, 1, 1, 1)))
colnames(design) <- c("Intercept", "Diff")
dat <- dat %>% select(-c(n.spectra, n.peptides ))
eb.fit <- function(dat, design){
n <- dim(dat)[1]
fit <- lmFit(dat, design)
fit.eb <- eBayes(fit)
logFC <- fit.eb$coefficients[, 2]
df.r <- fit.eb$df.residual
df.0 <- rep(fit.eb$df.prior, n)
s2.0 <- rep(fit.eb$s2.prior, n)
s2 <- (fit.eb$sigma)^2
s2.post <- fit.eb$s2.post
t.ord <- fit.eb$coefficients[, 2]/fit.eb$sigma/fit.eb$stdev.unscaled[, 2]
t.mod <- fit.eb$t[, 2]
p.ord <- 2*pt(-abs(t.ord), fit.eb$df.residual)
p.mod <- fit.eb$p.value[, 2]
q.ord <- qvalue(p.ord)$q
q.mod <- qvalue(p.mod)$q
results.eb <- data.frame(logFC, t.ord, t.mod, p.ord, p.mod, q.ord, q.mod, df.r, df.0, s2.0, s2, s2.post)
results.eb <- results.eb[order(results.eb$p.mod), ]
return(results.eb)
}
res.eb <- eb.fit(dat, design)
res.eb$accession <- rownames(res.eb)
res.eb <- res.eb %>% as_tibble()
ref.guide <- data[,c("Protein Descriptions", "Protein.Group.Accessions")]
res.eb$Protein <- ref.guide$`Protein Descriptions`[match(res.eb$accession, ref.guide$Protein.Group.Accessions)]
res.eb %>% arrange(p.ord) %>% select(Protein, p.ord, logFC) %>% rename("p-value"=p.ord)
d
dat %>% as_tibble()
res,eb
res.eb
dat
dim(dat)
colnames(dat)
library(tidyverse)
library(readxl)
library(qvalue)
library(limma)
path <- "/Users/aditharun/Desktop/research/wilson/data"
sample <- "heart"
file <- paste0(path,"/",sample,"_tmt.xlsx")
data <- read_excel(path=file, sheet=1)
lookup <- read_excel(path=file, sheet=2)
data <- data[data$`Isolation Interference [%]` < 30, ]
value.indexes <- which(startsWith(colnames(data),"Abundance"))
start <- min(value.indexes)
end <- max(value.indexes)
#determine which values are WT, which are KO in the TMT data
lookup$indexes <- match(paste(rep("Abundance: ", 10),gsub("[^[:alnum:][:space:]]", "", lookup$'TMT Label'), sep=""), colnames(data))
names <- paste(gsub("[^[:alnum:][:space:]]", "", lookup$'Condition'), rep(seq(1:5),2), sep="_")
colnames(data)[lookup$indexes] <- names
#Quant info is empty, but we should add something to filter on this criteria if it exists
if (!identical(which(colnames(data)=="Quan.Info"), integer(0)) ){
data <- data %>% filter(Quan.Info=="unique")
}
data[,c(start:end)] <- data[,c(start:end)] %>% replace(is.na(.), 0)
colnames(data)[c(5,8)] <- c("Sequence", "Protein.Group.Accessions")
read.peptides <- function(dat, cha){
output <- NULL
dat$Sequence <- as.character(dat$Sequence)
dat$Protein.Group.Accessions <- as.character(dat$Protein.Group.Accessions)
dat <- subset(dat, Protein.Group.Accessions!="")
dat <- subset(dat, !apply(dat[cha], 1, f <- function(x) any(is.na(x))))
}
dat <- read.peptides(data, names)
quantify.proteins <- function(dat, cha){
e.function <- function(x, seq) tapply(x, seq, median)
output <- NULL
dat$Sequence <- toupper(dat$Sequence) # Capital letters
accessions <- as.character(unique(dat$Protein.Group.Accessions))
n.proteins <- length(accessions)
n.cha <- length(cha)
for(k in 1:n.proteins){
id <- accessions[k]
sdat <- subset(dat, Protein.Group.Accessions==id)[c("Sequence", cha)]
#replace any values in sdat[cha] 0's w/ very small positive values
replace.zeros <- sdat[cha]
replace.zeros[replace.zeros==0] <- 0.0000000000001
sdat[cha] <- replace.zeros
sdat[cha] <- log2(sdat[cha])
sdat[cha] <- sdat[cha] - apply(sdat[cha], 1, median)
pdat <- sdat[, -1]
n.spectra <- ifelse(is.integer(dim(pdat)), nrow(pdat), 1)
temp <- apply(sdat[,-1], 2, e.function,seq=sdat[, 1])
n.peptides <- ifelse(is.integer(dim(temp)), nrow(temp), 1)
if(is.integer(dim(pdat))) pdat <- apply(pdat, 2, median)
pdat <- c(pdat, n.peptides=n.peptides, n.spectra=n.spectra)
output <- rbind(output, pdat)
}
output[,1:n.cha] <- sweep(output[,1:n.cha],1,apply(output[,1:n.cha],1,median))
output[,1:n.cha] <- sweep(output[,1:n.cha],2,apply(output[,1:n.cha],2,median))
output[,1:n.cha] <- sweep(output[,1:n.cha],1,apply(output[,1:n.cha],1,median))
output[,1:n.cha] <- round(output[,1:n.cha],3)
row.names(output) <- accessions
output <- as.data.frame(output)
return(output)
}
dat <- quantify.proteins(dat, names)
design <- model.matrix(~factor(c(2, 2, 2, 2, 2, 1, 1, 1, 1, 1)))
colnames(design) <- c("Intercept", "Diff")
dat <- dat %>% select(-c(n.spectra, n.peptides ))
eb.fit <- function(dat, design){
n <- dim(dat)[1]
fit <- lmFit(dat, design)
fit.eb <- eBayes(fit)
logFC <- fit.eb$coefficients[, 2]
df.r <- fit.eb$df.residual
df.0 <- rep(fit.eb$df.prior, n)
s2.0 <- rep(fit.eb$s2.prior, n)
s2 <- (fit.eb$sigma)^2
s2.post <- fit.eb$s2.post
t.ord <- fit.eb$coefficients[, 2]/fit.eb$sigma/fit.eb$stdev.unscaled[, 2]
t.mod <- fit.eb$t[, 2]
p.ord <- 2*pt(-abs(t.ord), fit.eb$df.residual)
p.mod <- fit.eb$p.value[, 2]
q.ord <- qvalue(p.ord)$q
q.mod <- qvalue(p.mod)$q
results.eb <- data.frame(logFC, t.ord, t.mod, p.ord, p.mod, q.ord, q.mod, df.r, df.0, s2.0, s2, s2.post)
results.eb <- results.eb[order(results.eb$p.mod), ]
return(results.eb)
}
res.eb <- eb.fit(dat, design)
res.eb$accession <- rownames(res.eb)
res.eb <- res.eb %>% as_tibble()
ref.guide <- data[,c("Protein Descriptions", "Protein.Group.Accessions")]
res.eb$Protein <- ref.guide$`Protein Descriptions`[match(res.eb$accession, ref.guide$Protein.Group.Accessions)]
res.eb %>% arrange(p.ord) %>% select(Protein, p.ord, logFC) %>% rename("p-value"=p.ord)
res.eb
dim(dat)
dat %>% as_tibble()
dat[1:10,]
res.eb
res.eb$accession
which(rownames(dat)==res.eb$accession[4])
dat[45,]
res.eb
final <- res.eb %>% arrange(p.ord) %>% select(Protein, p.ord, logFC) %>% rename("p-value"=p.ord)
final
plot(d$log2.foldchange, final$logFC)
plot(d$log2.foldchange, -final$logFC)
cor(d$log2.foldchange, -final$logFC))
cor(d$log2.foldchange, -final$logFC)
final
d
tial(d)
tail(d)
tail(final)
identical(d, final)
final <- res.eb %>% arrange(p.ord) %>% select(logFC, p.ord, Protein) %>% rename("p-value"=p.ord, "log2.foldchange"=logFC)
final
left_join(final, d, by=c("Protein"="Protein"))
g <- left_join(final, d, by=c("Protein"="Protein"))
plot(g$log2.foldchange.x, g$log2.foldchange.y)
plot(g$log2.foldchange.x, -g$log2.foldchange.y)
res.eb
final
res.eb$logFC <- -res.eb$logFC
final <- res.eb %>% arrange(p.ord) %>% select(logFC, p.ord, Protein) %>% rename("p-value"=p.ord, "log2.foldchange"=logFC)
res.eb
res.eb %>% mutate(FC=2logFC)
res.eb %>% mutate(FC=2^logFC)
final %>% mutate(fc=2^log2.foldchange)
final %>% mutate(fold.change=2^log2.foldchange)
final %>% mutate(fold.change=2^log2.foldchange, sign=ifelse(log2.foldchange>0, "KO > WT", "KO < WT")
)
final %>% mutate(fold.change=2^log2.foldchange, sign=ifelse(log2.foldchange>0, "KO > WT", "KO < WT"))
final %>% mutate('fold.change (KO/WT)'=2^log2.foldchange, sign=ifelse(log2.foldchange>0, "KO > WT", "KO < WT"))
library(tidyverse)
library(readxl)
library(qvalue)
library(limma)
path <- "/Users/aditharun/Desktop/research/wilson/data"
sample <- "heart"
file <- paste0(path,"/",sample,"_tmt.xlsx")
data <- read_excel(path=file, sheet=1)
lookup <- read_excel(path=file, sheet=2)
data <- data[data$`Isolation Interference [%]` < 30, ]
value.indexes <- which(startsWith(colnames(data),"Abundance"))
start <- min(value.indexes)
end <- max(value.indexes)
#determine which values are WT, which are KO in the TMT data
lookup$indexes <- match(paste(rep("Abundance: ", 10),gsub("[^[:alnum:][:space:]]", "", lookup$'TMT Label'), sep=""), colnames(data))
names <- paste(gsub("[^[:alnum:][:space:]]", "", lookup$'Condition'), rep(seq(1:5),2), sep="_")
colnames(data)[lookup$indexes] <- names
#Quant info is empty, but we should add something to filter on this criteria if it exists
if (!identical(which(colnames(data)=="Quan.Info"), integer(0)) ){
data <- data %>% filter(Quan.Info=="unique")
}
data[,c(start:end)] <- data[,c(start:end)] %>% replace(is.na(.), 0)
colnames(data)[c(5,8)] <- c("Sequence", "Protein.Group.Accessions")
read.peptides <- function(dat, cha){
output <- NULL
dat$Sequence <- as.character(dat$Sequence)
dat$Protein.Group.Accessions <- as.character(dat$Protein.Group.Accessions)
dat <- subset(dat, Protein.Group.Accessions!="")
dat <- subset(dat, !apply(dat[cha], 1, f <- function(x) any(is.na(x))))
}
dat <- read.peptides(data, names)
quantify.proteins <- function(dat, cha){
e.function <- function(x, seq) tapply(x, seq, median)
output <- NULL
dat$Sequence <- toupper(dat$Sequence) # Capital letters
accessions <- as.character(unique(dat$Protein.Group.Accessions))
n.proteins <- length(accessions)
n.cha <- length(cha)
for(k in 1:n.proteins){
id <- accessions[k]
sdat <- subset(dat, Protein.Group.Accessions==id)[c("Sequence", cha)]
#replace any values in sdat[cha] 0's w/ very small positive values
replace.zeros <- sdat[cha]
replace.zeros[replace.zeros==0] <- 0.0000000000001
sdat[cha] <- replace.zeros
sdat[cha] <- log2(sdat[cha])
sdat[cha] <- sdat[cha] - apply(sdat[cha], 1, median)
pdat <- sdat[, -1]
n.spectra <- ifelse(is.integer(dim(pdat)), nrow(pdat), 1)
temp <- apply(sdat[,-1], 2, e.function,seq=sdat[, 1])
n.peptides <- ifelse(is.integer(dim(temp)), nrow(temp), 1)
if(is.integer(dim(pdat))) pdat <- apply(pdat, 2, median)
pdat <- c(pdat, n.peptides=n.peptides, n.spectra=n.spectra)
output <- rbind(output, pdat)
}
output[,1:n.cha] <- sweep(output[,1:n.cha],1,apply(output[,1:n.cha],1,median))
output[,1:n.cha] <- sweep(output[,1:n.cha],2,apply(output[,1:n.cha],2,median))
output[,1:n.cha] <- sweep(output[,1:n.cha],1,apply(output[,1:n.cha],1,median))
output[,1:n.cha] <- round(output[,1:n.cha],3)
row.names(output) <- accessions
output <- as.data.frame(output)
return(output)
}
dat <- quantify.proteins(dat, names)
design <- model.matrix(~factor(c(2, 2, 2, 2, 2, 1, 1, 1, 1, 1)))
colnames(design) <- c("Intercept", "Diff")
dat <- dat %>% select(-c(n.spectra, n.peptides ))
eb.fit <- function(dat, design){
n <- dim(dat)[1]
fit <- lmFit(dat, design)
fit.eb <- eBayes(fit)
logFC <- fit.eb$coefficients[, 2]
df.r <- fit.eb$df.residual
df.0 <- rep(fit.eb$df.prior, n)
s2.0 <- rep(fit.eb$s2.prior, n)
s2 <- (fit.eb$sigma)^2
s2.post <- fit.eb$s2.post
t.ord <- fit.eb$coefficients[, 2]/fit.eb$sigma/fit.eb$stdev.unscaled[, 2]
t.mod <- fit.eb$t[, 2]
p.ord <- 2*pt(-abs(t.ord), fit.eb$df.residual)
p.mod <- fit.eb$p.value[, 2]
q.ord <- qvalue(p.ord)$q
q.mod <- qvalue(p.mod)$q
results.eb <- data.frame(logFC, t.ord, t.mod, p.ord, p.mod, q.ord, q.mod, df.r, df.0, s2.0, s2, s2.post)
results.eb <- results.eb[order(results.eb$p.mod), ]
return(results.eb)
}
res.eb <- eb.fit(dat, design)
res.eb$accession <- rownames(res.eb)
res.eb <- res.eb %>% as_tibble()
ref.guide <- data[,c("Protein Descriptions", "Protein.Group.Accessions")]
res.eb$Protein <- ref.guide$`Protein Descriptions`[match(res.eb$accession, ref.guide$Protein.Group.Accessions)]
#the ratio of log FC is WT / KO but we want KO / WT so we must negate the value
res.eb$logFC <- -res.eb$logFC
#show fold change and sign (i.e. whether KO > WT or WT > KO)
final <- res.eb %>% arrange(p.ord) %>% select(logFC, p.ord, Protein) %>% rename("p-value"=p.ord, "log2.foldchange"=logFC)
final <- final %>% mutate('fold.change (KO/WT)'=2^log2.foldchange, sign=ifelse(log2.foldchange>0, "KO > WT", "KO < WT"))
final
final <- final %>% mutate('fold.change (KO/WT)'=2^log2.foldchange, sign=ifelse(log2.foldchange>0, "KO > WT", "KO < WT")) %>% select('fold.change (KO/WT)', sign, 'p-value', log2.foldchange, Protein)
final
library(writexl)
install.packages("writexl")
library(writexl)
write_xlsx(final, path="/Users/aditharun/Desktop/research/wilson/test.xlsx")
outdir <- "/Users/aditharun/Desktop/research/wilson/final-data"
file.path(outdir, paste0(sample,"tmt.xlsx"))
############ user entered parameters ########
sample <- "heart"
###########################
##### script starts here ##############
library(tidyverse)
library(readxl)
library(qvalue)
library(limma)
library(writexl)
path <- "/Users/aditharun/Desktop/research/wilson/data"
file <- paste0(path,"/",sample,"_tmt.xlsx")
data <- read_excel(path=file, sheet=1)
lookup <- read_excel(path=file, sheet=2)
data <- data[data$`Isolation Interference [%]` < 30, ]
value.indexes <- which(startsWith(colnames(data),"Abundance"))
start <- min(value.indexes)
end <- max(value.indexes)
#determine which values are WT, which are KO in the TMT data
lookup$indexes <- match(paste(rep("Abundance: ", 10),gsub("[^[:alnum:][:space:]]", "", lookup$'TMT Label'), sep=""), colnames(data))
names <- paste(gsub("[^[:alnum:][:space:]]", "", lookup$'Condition'), rep(seq(1:5),2), sep="_")
colnames(data)[lookup$indexes] <- names
#Quant info is empty, but we should add something to filter on this criteria if it exists
if (!identical(which(colnames(data)=="Quan.Info"), integer(0)) ){
data <- data %>% filter(Quan.Info=="unique")
}
data[,c(start:end)] <- data[,c(start:end)] %>% replace(is.na(.), 0)
colnames(data)[c(5,8)] <- c("Sequence", "Protein.Group.Accessions")
read.peptides <- function(dat, cha){
output <- NULL
dat$Sequence <- as.character(dat$Sequence)
dat$Protein.Group.Accessions <- as.character(dat$Protein.Group.Accessions)
dat <- subset(dat, Protein.Group.Accessions!="")
dat <- subset(dat, !apply(dat[cha], 1, f <- function(x) any(is.na(x))))
}
dat <- read.peptides(data, names)
quantify.proteins <- function(dat, cha){
e.function <- function(x, seq) tapply(x, seq, median)
output <- NULL
dat$Sequence <- toupper(dat$Sequence) # Capital letters
accessions <- as.character(unique(dat$Protein.Group.Accessions))
n.proteins <- length(accessions)
n.cha <- length(cha)
for(k in 1:n.proteins){
id <- accessions[k]
sdat <- subset(dat, Protein.Group.Accessions==id)[c("Sequence", cha)]
#replace any values in sdat[cha] 0's w/ very small positive values
replace.zeros <- sdat[cha]
replace.zeros[replace.zeros==0] <- 0.0000000000001
sdat[cha] <- replace.zeros
sdat[cha] <- log2(sdat[cha])
sdat[cha] <- sdat[cha] - apply(sdat[cha], 1, median)
pdat <- sdat[, -1]
n.spectra <- ifelse(is.integer(dim(pdat)), nrow(pdat), 1)
temp <- apply(sdat[,-1], 2, e.function,seq=sdat[, 1])
n.peptides <- ifelse(is.integer(dim(temp)), nrow(temp), 1)
if(is.integer(dim(pdat))) pdat <- apply(pdat, 2, median)
pdat <- c(pdat, n.peptides=n.peptides, n.spectra=n.spectra)
output <- rbind(output, pdat)
}
output[,1:n.cha] <- sweep(output[,1:n.cha],1,apply(output[,1:n.cha],1,median))
output[,1:n.cha] <- sweep(output[,1:n.cha],2,apply(output[,1:n.cha],2,median))
output[,1:n.cha] <- sweep(output[,1:n.cha],1,apply(output[,1:n.cha],1,median))
output[,1:n.cha] <- round(output[,1:n.cha],3)
row.names(output) <- accessions
output <- as.data.frame(output)
return(output)
}
dat <- quantify.proteins(dat, names)
design <- model.matrix(~factor(c(2, 2, 2, 2, 2, 1, 1, 1, 1, 1)))
colnames(design) <- c("Intercept", "Diff")
dat <- dat %>% select(-c(n.spectra, n.peptides ))
eb.fit <- function(dat, design){
n <- dim(dat)[1]
fit <- lmFit(dat, design)
fit.eb <- eBayes(fit)
logFC <- fit.eb$coefficients[, 2]
df.r <- fit.eb$df.residual
df.0 <- rep(fit.eb$df.prior, n)
s2.0 <- rep(fit.eb$s2.prior, n)
s2 <- (fit.eb$sigma)^2
s2.post <- fit.eb$s2.post
t.ord <- fit.eb$coefficients[, 2]/fit.eb$sigma/fit.eb$stdev.unscaled[, 2]
t.mod <- fit.eb$t[, 2]
p.ord <- 2*pt(-abs(t.ord), fit.eb$df.residual)
p.mod <- fit.eb$p.value[, 2]
q.ord <- qvalue(p.ord)$q
q.mod <- qvalue(p.mod)$q
results.eb <- data.frame(logFC, t.ord, t.mod, p.ord, p.mod, q.ord, q.mod, df.r, df.0, s2.0, s2, s2.post)
results.eb <- results.eb[order(results.eb$p.mod), ]
return(results.eb)
}
res.eb <- eb.fit(dat, design)
res.eb$accession <- rownames(res.eb)
res.eb <- res.eb %>% as_tibble()
ref.guide <- data[,c("Protein Descriptions", "Protein.Group.Accessions")]
res.eb$Protein <- ref.guide$`Protein Descriptions`[match(res.eb$accession, ref.guide$Protein.Group.Accessions)]
#the ratio of log FC is WT / KO but we want KO / WT so we must negate the value
res.eb$logFC <- -res.eb$logFC
#show fold change and sign (i.e. whether KO > WT or WT > KO)
final <- res.eb %>% arrange(p.ord) %>% select(logFC, p.ord, Protein) %>% rename("p-value"=p.ord, "log2.foldchange"=logFC)
final <- final %>% mutate('fold.change (KO/WT)'=2^log2.foldchange, sign=ifelse(log2.foldchange>0, "KO > WT", "KO < WT")) %>% select('fold.change (KO/WT)', sign, 'p-value', log2.foldchange, Protein)
outdir <- "/Users/aditharun/Desktop/research/wilson/final-data"
outfile <- file.path(outdir, paste0(sample,"-tmt.xlsx"))
write_xlsx(final, path=outfile)
############ user entered parameters ########
sample <- "brain"
###########################
##### script starts here ##############
library(tidyverse)
library(readxl)
library(qvalue)
library(limma)
library(writexl)
path <- "/Users/aditharun/Desktop/research/wilson/data"
file <- paste0(path,"/",sample,"_tmt.xlsx")
data <- read_excel(path=file, sheet=1)
lookup <- read_excel(path=file, sheet=2)
data <- data[data$`Isolation Interference [%]` < 30, ]
value.indexes <- which(startsWith(colnames(data),"Abundance"))
start <- min(value.indexes)
end <- max(value.indexes)
#determine which values are WT, which are KO in the TMT data
lookup$indexes <- match(paste(rep("Abundance: ", 10),gsub("[^[:alnum:][:space:]]", "", lookup$'TMT Label'), sep=""), colnames(data))
names <- paste(gsub("[^[:alnum:][:space:]]", "", lookup$'Condition'), rep(seq(1:5),2), sep="_")
colnames(data)[lookup$indexes] <- names
#Quant info is empty, but we should add something to filter on this criteria if it exists
if (!identical(which(colnames(data)=="Quan.Info"), integer(0)) ){
data <- data %>% filter(Quan.Info=="unique")
}
data[,c(start:end)] <- data[,c(start:end)] %>% replace(is.na(.), 0)
colnames(data)[c(5,8)] <- c("Sequence", "Protein.Group.Accessions")
read.peptides <- function(dat, cha){
output <- NULL
dat$Sequence <- as.character(dat$Sequence)
dat$Protein.Group.Accessions <- as.character(dat$Protein.Group.Accessions)
dat <- subset(dat, Protein.Group.Accessions!="")
dat <- subset(dat, !apply(dat[cha], 1, f <- function(x) any(is.na(x))))
}
dat <- read.peptides(data, names)
quantify.proteins <- function(dat, cha){
e.function <- function(x, seq) tapply(x, seq, median)
output <- NULL
dat$Sequence <- toupper(dat$Sequence) # Capital letters
accessions <- as.character(unique(dat$Protein.Group.Accessions))
n.proteins <- length(accessions)
n.cha <- length(cha)
for(k in 1:n.proteins){
id <- accessions[k]
sdat <- subset(dat, Protein.Group.Accessions==id)[c("Sequence", cha)]
#replace any values in sdat[cha] 0's w/ very small positive values
replace.zeros <- sdat[cha]
replace.zeros[replace.zeros==0] <- 0.0000000000001
sdat[cha] <- replace.zeros
sdat[cha] <- log2(sdat[cha])
sdat[cha] <- sdat[cha] - apply(sdat[cha], 1, median)
pdat <- sdat[, -1]
n.spectra <- ifelse(is.integer(dim(pdat)), nrow(pdat), 1)
temp <- apply(sdat[,-1], 2, e.function,seq=sdat[, 1])
n.peptides <- ifelse(is.integer(dim(temp)), nrow(temp), 1)
if(is.integer(dim(pdat))) pdat <- apply(pdat, 2, median)
pdat <- c(pdat, n.peptides=n.peptides, n.spectra=n.spectra)
output <- rbind(output, pdat)
}
output[,1:n.cha] <- sweep(output[,1:n.cha],1,apply(output[,1:n.cha],1,median))
output[,1:n.cha] <- sweep(output[,1:n.cha],2,apply(output[,1:n.cha],2,median))
output[,1:n.cha] <- sweep(output[,1:n.cha],1,apply(output[,1:n.cha],1,median))
output[,1:n.cha] <- round(output[,1:n.cha],3)
row.names(output) <- accessions
output <- as.data.frame(output)
return(output)
}
dat <- quantify.proteins(dat, names)
design <- model.matrix(~factor(c(2, 2, 2, 2, 2, 1, 1, 1, 1, 1)))
colnames(design) <- c("Intercept", "Diff")
dat <- dat %>% select(-c(n.spectra, n.peptides ))
eb.fit <- function(dat, design){
n <- dim(dat)[1]
fit <- lmFit(dat, design)
fit.eb <- eBayes(fit)
logFC <- fit.eb$coefficients[, 2]
df.r <- fit.eb$df.residual
df.0 <- rep(fit.eb$df.prior, n)
s2.0 <- rep(fit.eb$s2.prior, n)
s2 <- (fit.eb$sigma)^2
s2.post <- fit.eb$s2.post
t.ord <- fit.eb$coefficients[, 2]/fit.eb$sigma/fit.eb$stdev.unscaled[, 2]
t.mod <- fit.eb$t[, 2]
p.ord <- 2*pt(-abs(t.ord), fit.eb$df.residual)
p.mod <- fit.eb$p.value[, 2]
q.ord <- qvalue(p.ord)$q
q.mod <- qvalue(p.mod)$q
results.eb <- data.frame(logFC, t.ord, t.mod, p.ord, p.mod, q.ord, q.mod, df.r, df.0, s2.0, s2, s2.post)
results.eb <- results.eb[order(results.eb$p.mod), ]
return(results.eb)
}
res.eb <- eb.fit(dat, design)
res.eb$accession <- rownames(res.eb)
res.eb <- res.eb %>% as_tibble()
ref.guide <- data[,c("Protein Descriptions", "Protein.Group.Accessions")]
res.eb$Protein <- ref.guide$`Protein Descriptions`[match(res.eb$accession, ref.guide$Protein.Group.Accessions)]
#the ratio of log FC is WT / KO but we want KO / WT so we must negate the value
res.eb$logFC <- -res.eb$logFC
#show fold change and sign (i.e. whether KO > WT or WT > KO)
final <- res.eb %>% arrange(p.ord) %>% select(logFC, p.ord, Protein) %>% rename("p-value"=p.ord, "log2.foldchange"=logFC)
final <- final %>% mutate('fold.change (KO/WT)'=2^log2.foldchange, sign=ifelse(log2.foldchange>0, "KO > WT", "KO < WT")) %>% select('fold.change (KO/WT)', sign, 'p-value', log2.foldchange, Protein)
outdir <- "/Users/aditharun/Desktop/research/wilson/final-data"
outfile <- file.path(outdir, paste0(sample,"-tmt.xlsx"))
write_xlsx(final, path=outfile)
library(tidyverse)
setwd("/Users/aditharun/Desktop/research/wilson/data")
