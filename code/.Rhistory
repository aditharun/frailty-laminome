grid.row.y <- rep(seq(2, tot, 2), each=n)
borders.x <- c(grid.column.x, grid.row.x)
borders.y <- c(grid.column.y, grid.row.y)
data$x[1:length(borders.x)] <- borders.x
data$y[1:length(borders.y)] <- borders.y
data$fill[1:length(borders.y)] <- "black"
data$expand[1:length(borders.y)] <- 1
begin <- length(borders.y) + 1
end <- nrow(data)
squares <- setdiff(c(1:tot), unique(grid.column.x))
xcoord <- rep(squares, n)
ycoord <- rep(squares, each=n)
data$x[begin:end] <- xcoord
data$y[begin:end] <- ycoord
squares <- setdiff(c(1:tot), unique(grid.column.x))
xcoord <- rep(squares, n)
ycoord <- rep(squares, each=n)
data$x[begin:end] <- xcoord
data$y[begin:end] <- ycoord
data$fill[begin:end] <- sample(c("red", "blue"), replace=TRUE, size=n^2)
data$expand <- 2
ggplot(data, aes(x=x,y=y,fill=fill)) +
geom_tile(aes(fill = fill), colour = "grey70") + theme_bw()
#
library(magrittr)
library(tidyverse)
library(here)
library(devtools)
load_all(here("code/DFDBayes/R"))
load(here("data/metadata.rda"))
library(ggtern)
library(grid)
library(gridExtra)
library(SummarizedExperiment)
library(readxl)
#Note: ggtern when loaded overwrites a lot of core ggplot2 functionality, and there is no fix for this
#so, we must keep ggtern graphics in a separate script.
#Figure 3B
#E[theta | z = 1] and if z never 1 then hematopoietic is 1 by default
#use matched deconvolution all iteration data from 3c
#Hemato | Tumor | Normal | Z | Sample | Stage | MAF
dat <- readRDS(here("data", "figure3", "plot.figure.rds")) %>%
as_tibble()  %>%
type.convert(as.is=TRUE)
mt <- metadata %>%
select(patient, maf, ichor, stage) %>%
distinct()
dat2 <- left_join(dat, mt, by=c("sample"="patient")) %>%
mutate(high_maf=ifelse(maf >= 0.02, "MAF > 2%", "MAF < 2%"),
test=ifelse(sample=="CGCRC291", "0", ""))
##saveRDS(data, here("data", "figure3", "dfd_results_cancer.rds"))
colnames(dat2)[1] <- "hematopoietic"
title.size <- 30
facet.size <- 30
text.size <- 15
legend.size <- 14
legend.title <- 18
fig.ternary <- dat2 %>%
ggtern(aes(x=normal, y=tumor, z=hematopoietic))  +
geom_point(size=5, pch=21,
aes(fill=high_maf)) +
geom_text(aes(label=stage), size=3, color='white') +
ggtern::theme_bw() +
Tlab("Colon tumor\n") +
Llab("Colon adjacent normal\n") +
##Rlab("Hematopoietic\n") +
Rlab("") +
theme_showarrows() +
theme_hidetitles() +
tern_limits(T=.65, R=1.05, L=.65) +
theme(tern.axis.text=element_text(size=text.size, color="black")) +
theme(strip.background = element_rect(color="transparent",
fill="transparent"),
axis.text.y=element_text(size=text.size),
axis.title=element_text(size=title.size),
legend.text = element_text(size=legend.size),
strip.text = element_text(size=facet.size),
legend.title=element_text(size=13),
tern.axis.arrow.sep=0.1,
tern.axis.title.T=element_text(size=title.size),
tern.axis.title.L=element_text(size=title.size),
tern.axis.title.R=element_text(size=title.size),
legend.key.width=unit(1, "cm"),
tern.panel.background=element_blank(),
legend.position="bottom") +
##guides(fill=guide_legend(title="")) +
guides(fill="none") +
theme_hidegrid() +
theme_showgrid_major()
fig.ternary
set.seed(123)
#- task 3: since x1 is now endogenous in the misspecified model use z as an instrument for x1
#- task 6: please add a brief interpretation of the test results as a comment
###########
#Problem 1
###########
ols <- function(sample.size, mc.iter, beta_0, beta_1){
outputs <- lapply(1:mc.iter, function(x) estimate(sample.size, beta_0, beta_1))
#first column is beta_0 and second is beta_1
df <- do.call(rbind, outputs)
bias_0 <- mean(df[,1]) - beta_0
bias_1 <- mean(df[,2]) - beta_1
var_0 <- var(df[,1])
var_1 <- var(df[,2])
mse_0 <- bias_0^2 + var_0
mse_1 <- bias_1^2 + var_1
#combine results in neat table
res <- data.frame(bias=c(bias_0, bias_1), var=c(var_0, var_1), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1"), sample_size=c(sample.size, sample.size))
res
}
estimate <- function(sample.size, beta_0, beta_1){
#generate data
x <- rnorm(n=sample.size, mean=0, sd=1)
u <- rnorm(n=sample.size, mean=0, sd=1)
y <- beta_0 + beta_1*x + u
#perform OLS and get coefficients
out <- lm(y ~ x)
params <- unname(out$coefficients)
return(params)
}
beta_0 <- 0.5
beta_1 <- 1
sample.sizes <- c(20, 100, 500, 1000)
misspecified <- function(sample.size, mc.iter, beta_0, beta_1, beta_2, covar){
outputs <- lapply(1:mc.iter, function(x) estimate_misspecified(sample.size, beta_0, beta_1, beta_2, covar))
#first column is beta_0 and second is beta_1
df <- do.call(rbind, outputs)
bias_0 <- mean(df[,1]) - beta_0
bias_1 <- mean(df[,2]) - beta_1
var_0 <- var(df[,1])
var_1 <- var(df[,2])
mse_0 <- bias_0^2 + var_0
mse_1 <- bias_1^2 + var_1
#combine results in neat table
res <- data.frame(bias=c(bias_0, bias_1), var=c(var_0, var_1), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1"), sample_size=c(sample.size, sample.size))
res
}
estimate_misspecified <- function(sample.size, beta_0, beta_1, beta_2, covar){
#generate data
u <- rnorm(n=sample.size, mean=0, sd=1)
sigma <- data.frame(c(1, covar), c( covar,1))
#find cholesky decomposition of variance matrix
b <- as.matrix(chol(sigma))
#generate two standard normal random variables of appropriate length
#so that we can transform them into the samples from the MVN
r1 <- rnorm(n=sample.size, mean=0, sd=1)
r2 <- rnorm(n=sample.size, mean=0, sd=1)
#put in matrix form
coeff <- t(matrix(data=c(beta_1, beta_2)))
#generate x1 and x2
inter <- lapply(1:sample.size, function(x) b %*% matrix(data=c(r1[x], r2[x])))
#do b_2*x2 + b_1*x1
inter_final <- unlist(lapply(inter, function(x) coeff %*% x))
#b_2*x2 + b_1*x1 + u + b_0
y <- inter_final + u + beta_0
#get x1
x1 <- unlist(inter)[c(TRUE, FALSE)]
#get x2
x2 <- unlist(inter)[c(TRUE, FALSE)]
#estimate true model
true.out <- lm(y ~ x1 + x2)
true.params <- unname(true.out$coefficients)
#perform OLS and get coefficients
out <- lm(y ~ x1)
params <- unname(out$coefficients)
return(list(true=true.params, misspec=params))
}
misspecified <- function(sample.size, mc.iter, beta_0, beta_1, beta_2, covar){
outputs <- lapply(1:mc.iter, function(x) estimate_misspecified(sample.size, beta_0, beta_1, beta_2, covar))
return(outputs)
#first column is beta_0 and second is beta_1
df <- do.call(rbind, outputs)
bias_0 <- mean(df[,1]) - beta_0
bias_1 <- mean(df[,2]) - beta_1
var_0 <- var(df[,1])
var_1 <- var(df[,2])
mse_0 <- bias_0^2 + var_0
mse_1 <- bias_1^2 + var_1
#combine results in neat table
res <- data.frame(bias=c(bias_0, bias_1), var=c(var_0, var_1), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1"), sample_size=c(sample.size, sample.size))
res
}
estimate_misspecified <- function(sample.size, beta_0, beta_1, beta_2, covar){
#generate data
u <- rnorm(n=sample.size, mean=0, sd=1)
sigma <- data.frame(c(1, covar), c( covar,1))
#find cholesky decomposition of variance matrix
b <- as.matrix(chol(sigma))
#generate two standard normal random variables of appropriate length
#so that we can transform them into the samples from the MVN
r1 <- rnorm(n=sample.size, mean=0, sd=1)
r2 <- rnorm(n=sample.size, mean=0, sd=1)
#put in matrix form
coeff <- t(matrix(data=c(beta_1, beta_2)))
#generate x1 and x2
inter <- lapply(1:sample.size, function(x) b %*% matrix(data=c(r1[x], r2[x])))
#do b_2*x2 + b_1*x1
inter_final <- unlist(lapply(inter, function(x) coeff %*% x))
#b_2*x2 + b_1*x1 + u + b_0
y <- inter_final + u + beta_0
#get x1
x1 <- unlist(inter)[c(TRUE, FALSE)]
#get x2
x2 <- unlist(inter)[c(TRUE, FALSE)]
#estimate true model
true.out <- lm(y ~ x1 + x2)
true.params <- unname(true.out$coefficients)
#perform OLS and get coefficients
out <- lm(y ~ x1)
params <- unname(out$coefficients)
return(list(true=true.params, misspec=params))
}
test <- lapply(c(20,30), function(x) misspecified(x, 10, beta_0, beta_1, beta_2, covar))
covar <- 0.5
beta2 <- 0.3
test <- lapply(c(20,30), function(x) misspecified(x, 10, beta_0, beta_1, beta_2, covar))
beta_2 <- 0.3
test <- lapply(c(20,30), function(x) misspecified(x, 10, beta_0, beta_1, beta_2, covar))
test
unlist(test)
estimate_misspecified <- function(sample.size, beta_0, beta_1, beta_2, covar){
#generate data
u <- rnorm(n=sample.size, mean=0, sd=1)
sigma <- data.frame(c(1, covar), c( covar,1))
#find cholesky decomposition of variance matrix
b <- as.matrix(chol(sigma))
#generate two standard normal random variables of appropriate length
#so that we can transform them into the samples from the MVN
r1 <- rnorm(n=sample.size, mean=0, sd=1)
r2 <- rnorm(n=sample.size, mean=0, sd=1)
#put in matrix form
coeff <- t(matrix(data=c(beta_1, beta_2)))
#generate x1 and x2
inter <- lapply(1:sample.size, function(x) b %*% matrix(data=c(r1[x], r2[x])))
#do b_2*x2 + b_1*x1
inter_final <- unlist(lapply(inter, function(x) coeff %*% x))
#b_2*x2 + b_1*x1 + u + b_0
y <- inter_final + u + beta_0
#get x1
x1 <- unlist(inter)[c(TRUE, FALSE)]
#get x2
x2 <- unlist(inter)[c(FALSE, TRUE)]
#estimate true model
true.out <- lm(y ~ x1 + x2)
true.params <- unname(true.out$coefficients)
#perform OLS and get coefficients
out <- lm(y ~ x1)
params <- unname(out$coefficients)
return(list(true=true.params, misspec=params))
}
misspecified <- function(sample.size, mc.iter, beta_0, beta_1, beta_2, covar){
outputs <- lapply(1:mc.iter, function(x) estimate_misspecified(sample.size, beta_0, beta_1, beta_2, covar))
return(outputs)
#first column is beta_0 and second is beta_1
df <- do.call(rbind, outputs)
bias_0 <- mean(df[,1]) - beta_0
bias_1 <- mean(df[,2]) - beta_1
var_0 <- var(df[,1])
var_1 <- var(df[,2])
mse_0 <- bias_0^2 + var_0
mse_1 <- bias_1^2 + var_1
#combine results in neat table
res <- data.frame(bias=c(bias_0, bias_1), var=c(var_0, var_1), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1"), sample_size=c(sample.size, sample.size))
res
}
test <- lapply(c(20,30), function(x) misspecified(x, 10, beta_0, beta_1, beta_2, covar))
test
test
lapply(test, function(x) x$misspec)
lapply(test, function(x) x)
lapply(test, function(x) unlist(x))
v <- lapply(test, function(x) unlist(x))
v
decple.outputs <- v
decple.outputs
grepl("true", names(decple.outputs))
names(decple.outputs)
decple.outputs
names(decple.outputs[[1]])
grepl("true", names(decple.outputs)[[1]])
grepl("true", names(decple.outputs[[1]]))
decple.outputs[[1]][grepl("true", names(decple.outputs[[1]]))]
library(tidyverse)
decple.outputs[[1]][grepl("true", names(decple.outputs[[1]]))] %>% do.call(rbind, .)
decple.outputs[[1]][grepl("true", names(decple.outputs[[1]]))] %>% as.data.frame()
decple.outputs[[1]][grepl("true", names(decple.outputs[[1]]))] %>% as.matrix(ncol=3)
lapply(20, function(x) misspecified(x, 10, beta_0, beta_1, beta_2, covar))
lapply(1:10, function(x) estimate_misspecified(20, beta_0, beta_1, beta_2, covar))
lapply(1:10, function(x) estimate_misspecified(20, beta_0, beta_1, beta_2, covar)) %>% unlist()
beta_2 <- 0.3
covar <- 0.5
true.and.omitted <- function(sample.size, mc.iter, beta_0, beta_1, beta_2, covar, model="true"){
outputs <- lapply(1:mc.iter, function(x) estimate_x1_x2(sample.size, beta_0, beta_1, beta_2, covar, model))
#first column is beta_0 and second is beta_1
df <- do.call(rbind, outputs)
bias_0 <- mean(df[,1]) - beta_0
bias_1 <- mean(df[,2]) - beta_1
var_0 <- var(df[,1])
var_1 <- var(df[,2])
mse_0 <- bias_0^2 + var_0
mse_1 <- bias_1^2 + var_1
if (model=="true"){
bias_2 <- mean(df[,3]) - beta_2
var_2 <- var(df[,3])
mse_2 <- bias_2^2 + var_2
res <- data.frame(bias=c(bias_0, bias_1, bias_2), var=c(var_0, var_1, var_2), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1", "beta_2"), sample_size=c(sample.size, sample.size, sample.size), model=c(model, model, model))
return(res)
}
#combine results in neat table
res <- data.frame(bias=c(bias_0, bias_1), var=c(var_0, var_1), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1"), sample_size=c(sample.size, sample.size), model=c(model, model, model))
return(res)
}
estimate_x1_x2 <- function(sample.size, beta_0, beta_1, beta_2, covar){
#generate data
u <- rnorm(n=sample.size, mean=0, sd=1)
sigma <- data.frame(c(1, covar), c( covar,1))
#find cholesky decomposition of variance matrix
b <- as.matrix(chol(sigma))
#generate two standard normal random variables of appropriate length
#so that we can transform them into the samples from the MVN
r1 <- rnorm(n=sample.size, mean=0, sd=1)
r2 <- rnorm(n=sample.size, mean=0, sd=1)
#put in matrix form
coeff <- t(matrix(data=c(beta_1, beta_2)))
#generate x1 and x2
inter <- lapply(1:sample.size, function(x) b %*% matrix(data=c(r1[x], r2[x])))
#do b_2*x2 + b_1*x1
inter_final <- unlist(lapply(inter, function(x) coeff %*% x))
#b_2*x2 + b_1*x1 + u + b_0
y <- inter_final + u + beta_0
#get x1
x1 <- unlist(inter)[c(TRUE, FALSE)]
#get x2
x2 <- unlist(inter)[c(FALSE, TRUE)]
#estimate true model
if (model=="true"){
out <- lm(y ~ x1 + x2)
params <- unname(true.out$coefficients)
return(params)
}
#perform OLS and get coefficients
out <- lm(y ~ x1)
params <- unname(out$coefficients)
return(params)
}
misspec <- lapply(sample.sizes, function(x) true.and.omitted(x, 10, beta_0, beta_1, beta_2, covar, "misspecified"))
true <- lapply(sample.sizes, function(x) true.and.omitted(x, 10, beta_0, beta_1, beta_2, covar, "true"))
true.and.omitted <- function(sample.size, mc.iter, beta_0, beta_1, beta_2, covar, model="true"){
outputs <- lapply(1:mc.iter, function(x) estimate_x1_x2(sample.size, beta_0, beta_1, beta_2, covar, model))
#first column is beta_0 and second is beta_1
df <- do.call(rbind, outputs)
bias_0 <- mean(df[,1]) - beta_0
bias_1 <- mean(df[,2]) - beta_1
var_0 <- var(df[,1])
var_1 <- var(df[,2])
mse_0 <- bias_0^2 + var_0
mse_1 <- bias_1^2 + var_1
if (model=="true"){
bias_2 <- mean(df[,3]) - beta_2
var_2 <- var(df[,3])
mse_2 <- bias_2^2 + var_2
res <- data.frame(bias=c(bias_0, bias_1, bias_2), var=c(var_0, var_1, var_2), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1", "beta_2"), sample_size=c(sample.size, sample.size, sample.size), model=c(model, model, model))
return(res)
}
#combine results in neat table
res <- data.frame(bias=c(bias_0, bias_1), var=c(var_0, var_1), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1"), sample_size=c(sample.size, sample.size), model=c(model, model, model))
return(res)
}
estimate_x1_x2 <- function(sample.size, beta_0, beta_1, beta_2, covar, model){
#generate data
u <- rnorm(n=sample.size, mean=0, sd=1)
sigma <- data.frame(c(1, covar), c( covar,1))
#find cholesky decomposition of variance matrix
b <- as.matrix(chol(sigma))
#generate two standard normal random variables of appropriate length
#so that we can transform them into the samples from the MVN
r1 <- rnorm(n=sample.size, mean=0, sd=1)
r2 <- rnorm(n=sample.size, mean=0, sd=1)
#put in matrix form
coeff <- t(matrix(data=c(beta_1, beta_2)))
#generate x1 and x2
inter <- lapply(1:sample.size, function(x) b %*% matrix(data=c(r1[x], r2[x])))
#do b_2*x2 + b_1*x1
inter_final <- unlist(lapply(inter, function(x) coeff %*% x))
#b_2*x2 + b_1*x1 + u + b_0
y <- inter_final + u + beta_0
#get x1
x1 <- unlist(inter)[c(TRUE, FALSE)]
#get x2
x2 <- unlist(inter)[c(FALSE, TRUE)]
#estimate true model
if (model=="true"){
out <- lm(y ~ x1 + x2)
params <- unname(true.out$coefficients)
return(params)
}
#perform OLS and get coefficients
out <- lm(y ~ x1)
params <- unname(out$coefficients)
return(params)
}
misspec <- lapply(sample.sizes, function(x) true.and.omitted(x, 100, beta_0, beta_1, beta_2, covar, "misspecified"))
true <- lapply(sample.sizes, function(x) true.and.omitted(x, 10, beta_0, beta_1, beta_2, covar, "true"))
true.and.omitted <- function(sample.size, mc.iter, beta_0, beta_1, beta_2, covar, model="true"){
outputs <- lapply(1:mc.iter, function(x) estimate_x1_x2(sample.size, beta_0, beta_1, beta_2, covar, model))
#first column is beta_0 and second is beta_1
df <- do.call(rbind, outputs)
bias_0 <- mean(df[,1]) - beta_0
bias_1 <- mean(df[,2]) - beta_1
var_0 <- var(df[,1])
var_1 <- var(df[,2])
mse_0 <- bias_0^2 + var_0
mse_1 <- bias_1^2 + var_1
if (model=="true"){
bias_2 <- mean(df[,3]) - beta_2
var_2 <- var(df[,3])
mse_2 <- bias_2^2 + var_2
res <- data.frame(bias=c(bias_0, bias_1, bias_2), var=c(var_0, var_1, var_2), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1", "beta_2"), sample_size=c(sample.size, sample.size, sample.size), model=c(model, model, model))
return(res)
}
#combine results in neat table
res <- data.frame(bias=c(bias_0, bias_1), var=c(var_0, var_1), mse=c(mse_0, mse_1), param=c("beta_0", "beta_1"), sample_size=c(sample.size, sample.size), model=c(model, model))
return(res)
}
estimate_x1_x2 <- function(sample.size, beta_0, beta_1, beta_2, covar, model){
#generate data
u <- rnorm(n=sample.size, mean=0, sd=1)
sigma <- data.frame(c(1, covar), c( covar,1))
#find cholesky decomposition of variance matrix
b <- as.matrix(chol(sigma))
#generate two standard normal random variables of appropriate length
#so that we can transform them into the samples from the MVN
r1 <- rnorm(n=sample.size, mean=0, sd=1)
r2 <- rnorm(n=sample.size, mean=0, sd=1)
#put in matrix form
coeff <- t(matrix(data=c(beta_1, beta_2)))
#generate x1 and x2
inter <- lapply(1:sample.size, function(x) b %*% matrix(data=c(r1[x], r2[x])))
#do b_2*x2 + b_1*x1
inter_final <- unlist(lapply(inter, function(x) coeff %*% x))
#b_2*x2 + b_1*x1 + u + b_0
y <- inter_final + u + beta_0
#get x1
x1 <- unlist(inter)[c(TRUE, FALSE)]
#get x2
x2 <- unlist(inter)[c(FALSE, TRUE)]
#estimate true model
if (model=="true"){
out <- lm(y ~ x1 + x2)
} else{
#perform OLS and get coefficients
out <- lm(y ~ x1)
}
params <- unname(out$coefficients)
return(params)
}
misspec <- lapply(sample.sizes, function(x) true.and.omitted(x, 10, beta_0, beta_1, beta_2, covar, "misspecified"))
true <- lapply(sample.sizes, function(x) true.and.omitted(x, 10, beta_0, beta_1, beta_2, covar, "true"))
misspec
misspec
do.call(rbind, c(misspec, misspec))
do.call(rbind, c(misspec, misspec)) %>% distinct()
library(dfdBayes)
load(here("data/cancer100kb.rda"))
load(here("data/healthy100kb.rda"))
library(magrittr)
library(tidyverse)
library(here)
library(grid)
library(gridExtra)
library(gridGraphics)
library(RColorBrewer)
library(SummarizedExperiment)
knitr::opts_chunk$set(echo=FALSE, autodep=TRUE)
library(dfdBayes)
load(here("data/cancer100kb.rda"))
load(here("data/healthy100kb.rda"))
library(DFDBayes)
load(here("data/cancer100kb.rda"))
load(here("data/healthy100kb.rda"))
4+3+8+15+14+1
(16*3.3 + 12*3 + 45*4 + 13*3.7)/(16+12+45+13)
(12*4 + 6*3.7)/18
filepath <- "/Users/aditharun/Desktop/pill_trackr/logbook.csv"
library(tidyverse)
f <- read_csv(filepath)
f <- read_csv(filepath)
f
f$Date
data.frame(Date="2021-02-23", `Pill Taken`=TRUE, Count=1)
rbind(f, data.frame(Date="2021-02-23", `Pill Taken`=TRUE, Count=1))
rbind(f, data.frame(Date="2021-02-23", `Pill Taken`=TRUE, Count=1))
rbind(f, data.frame(Date="2021-02-23", `Pill Taken`=TRUE, Count=1))
rbind(f, data.frame("Date"="2021-02-23", `Pill Taken`=TRUE, "Count"=1))
rbind(f, data.frame(Date="2021-02-23", `Pill Taken`=TRUE, Count=1))
colnames(f)
library(tidyverse)
r <- readRDS("~/Desktop/klw-analyses/allen/allen-shiny/matrix.plottable.rds")
r
r
install.packages("rentrez")
setwd("~/Desktop/klw-analyses/hmb/code/")
library(tidyverse)
library(readxl)
library(rentrez)
library(writexl)
sample <- "muscle"
tmpfile <- paste0("../temp/", sample, "-gene-progress.csv")
tmpfile
tmpfile <- paste0("../temp/", sample, "-gene-progress.csv")
read_csv(tmpfile)
read_csv(tmpfile) %>% select(index) %>% distinct()
